import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'org.openapi.generator' version "$openApiGenVersion"
}

def genFolder = "$rootDir/generated"
def docsFolder = "$rootDir/docs"
def clientFolder = "$rootDir/Vrem-Client"
def rtFolder = "$clientFolder/Runtime"

task clean(type: Delete) {
    delete "$genFolder"
    delete "$clientFolder"
}

task tidy(type: Delete) {
    delete "$genFolder"
}

task generateOpenApi(type: org.openapitools.generator.gradle.plugin.tasks.GenerateTask) {
    generatorName = 'csharp'
    inputSpec = "$docsFolder/vrem-oas.json"
    packageName = "Ch.Unibas.Dmi.Dbis.Vrem.Client"
    outputDir = "$genFolder"

    skipValidateSpec = true

    configOptions = [
            optionalEmitDefaultValues: "true"
    ]
}

task modex(type: Exec) {
    mustRunAfter generateOpenApi

    workingDir "$genFolder"

    if (!Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine "chmod", "+x", "$genFolder/build.sh"
    }
}

task buildOpenApi(type: Exec) {
    dependsOn generateOpenApi
    mustRunAfter modex

    workingDir "$genFolder"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine = "$genFolder.bat"
    } else {
        dependsOn "modex"
        commandLine = "$genFolder/build.sh"
    }
}

task purgeLibs(type: Delete) {
    mustRunAfter buildOpenApi

    delete "$genFolder/bin/JsonSubTypes.dll"
    delete "$genFolder/bin/Newtonsoft.Json.dll"
}

task deployLibs(type: Copy) {
    dependsOn buildOpenApi
    dependsOn purgeLibs

    from file("$genFolder/bin")
    into file("$rtFolder")

    // Automatically rename everything to prevent Unity from identifying packages as duplicates.
    rename('(.*)\\.([a-zA-Z0-9_-]*)', '$1.Vrem.$2')
}

task deployLink(type: Copy) {
    dependsOn buildOpenApi

    from file("$docsFolder/link.xml")
    into file("$rtFolder")
}

task deployPackage(type: Copy) {
    dependsOn buildOpenApi

    from file("$docsFolder/package.json")
    into file("$clientFolder")
}

task deployAll {
    dependsOn deployLibs
    dependsOn deployLink
    dependsOn deployPackage
}

task deploy {
    dependsOn deployAll
}
